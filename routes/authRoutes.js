const express = require("express");
const router = express.Router();
const jwt = require("jsonwebtoken");
const { register, login, logout} = require("../controllers/authController");
const { generateAccessToken } = require("../utils/token");
const User = require("../models/User");
const crypto = require("crypto");
const { normalizePhone } = require("../utils/phone");


function checkTelegramAuth(data) {
  const { hash, ...rest } = data;

  // –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ/–ø—É—Å—Ç—ã–µ –ø–æ–ª—è, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å checkString
  const filtered = Object.fromEntries(
    Object.entries(rest).filter(
      ([, v]) => v !== undefined && v !== null && v !== ""
    )
  );
  const checkString = Object.keys(filtered)
    .sort()
    .map((k) => `${k}=${filtered[k]}`)
    .join("\n");

  const secretKey = crypto
    .createHash("sha256")
    .update(process.env.BOT_TOKEN || "")
    .digest();

  const hmac = crypto
    .createHmac("sha256", secretKey)
    .update(checkString)
    .digest("hex");

  return hmac === hash;
}

router.get("/telegram/callback", (req, res) => {
  console.log("üì© Telegram redirect received!");
  res.send(`
    <h3>‚úÖ Telegram auth received. You can close this window.</h3>
    <script>setTimeout(() => window.close(), 1500)</script>
  `);
});

router.post("/telegram/validate", async (req, res) => {
  try {
    const { redirectUrl } = req.body;
    console.log("üïµÔ∏è Received redirectUrl:", redirectUrl);

    const match = redirectUrl?.match(/#tgAuthResult=([^#]+)/);
    if (!match) {
      return res.status(400).json({ message: "No tgAuthResult found" });
    }

    const raw = decodeURIComponent(match[1]);
    const userData = JSON.parse(Buffer.from(raw, "base64").toString("utf8"));

    console.log("üì¶ Parsed Telegram userData:", userData);

    if (!process.env.BOT_TOKEN) {
      console.error("‚ö†Ô∏è BOT_TOKEN is not set");
      return res.status(500).json({ message: "Server misconfigured" });
    }
    if (!checkTelegramAuth(userData)) {
      console.warn("‚ùå Invalid Telegram signature");
      return res.status(403).json({ message: "Invalid Telegram signature" });
    }

    const fallbackName =
      userData.first_name || userData.username || `tg_${userData.id}`;
    const fallbackEmail = `tg_${userData.id}@applepark.uz`;

    // –°–æ–∑–¥–∞—ë–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let user = await User.findOne({ telegram_id: userData.id });
    let isNewUser = false;
    if (!user) {
      const randomPassword = require("crypto").randomBytes(32).toString("hex");

      user = await User.create({
        telegram_id: String(userData.id),

        // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤–∞—à–µ–π —Å—Ö–µ–º—ã:
        name: fallbackName,
        email: fallbackEmail,
        password: randomPassword,

        // –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã):
        avatar: userData.photo_url || undefined,
        role: "user",
      });
      console.log("üë§ Created new user:", user._id);
      isNewUser = true;
    } else {
      // –ú–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä/–∏–º—è
      const updates = {
        name: fallbackName,
        email: fallbackEmail,
        avatar: userData.photo_url || undefined,
      };
      await User.updateOne({ _id: user._id }, updates);
      console.log("üîÅ Existing user updated:", user._id);
    }

    const token = generateAccessToken({ _id: user._id, role: user.role });
    console.log("üéüÔ∏è Generated JWT for:", user._id);

    return res.json({
      token,
      isNewUser,
      user: {
        id: String(user._id),
        telegram_id: user.telegram_id,
        email: user.email,
        name: user.name,
        photo_url: user.photo_url,
        role: user.role,
      },
    });
  } catch (err) {
    console.error("üî• Telegram validate error:", err);
    res
      .status(400)
      .json({ message: "Invalid Telegram data", error: err?.message || String(err) });
  }
});

router.post('/telegram/phone-save', async (req, res) => {
  try {
    // –æ–∂–∏–¥–∞–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–∏–∑ —Å–µ—Å—Å–∏–∏ / —Ç–æ–∫–µ–Ω–∞)
    const { userId, telegram_id, phone: rawPhone } = req.body;
    if (!rawPhone) return res.status(400).json({ message: 'Phone required' });

    // normalize and validate
    let phone;
    try {
      phone = normalizePhone(rawPhone);
    } catch (err) {
      return res.status(400).json({ message: 'Invalid phone format' });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ‚Äî atomic: –∏—Å–∫–∞—Ç—å –∏ –æ–±–Ω–æ–≤–∏—Ç—å
    const existing = await User.findOne({ phone });
    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —É–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É ‚Äî –æ—Ç–∫–∞–∑
    if (existing && (!userId || existing._id.toString() !== userId)) {
      return res.status(409).json({ message: '–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è' });
    }

    // –ù–∞–π—Ç–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let user;
    if (userId) user = await User.findById(userId);
    else if (telegram_id) user = await User.findOne({ telegram_id });
    else return res.status(400).json({ message: 'userId or telegram_id required' });

    if (!user) return res.status(404).json({ message: 'User not found' });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
    user.phone = phone;
    user.phone_verified = false;
    user.phone_verified_at = null;
    await user.save();

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å (–±–µ–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π)
    res.json({
      success: true,
      user: {
        id: user._id,
        telegram_id: user.telegram_id,
        phone: user.phone,
        phone_verified: user.phone_verified,
      },
    });
  } catch (err) {
    console.error('Phone save error:', err);
    res.status(500).json({ message: 'Server error' });
  }
});

router.post("/register", register);

router.post("/login", login);

router.post("/logout", logout)

router.post("/refresh", async (req, res) => {
  const token = req.cookies.refreshToken;
  if (!token) return res.status(401).json({ msg: "Refresh token yo‚Äòq" });

  try {
    const payload = jwt.verify(token, process.env.REFRESH_SECRET);

    const user = await User.findById(payload.id);
    if (!user) return res.status(404).json({ msg: "Foydalanuvchi topilmadi" });

    const accessToken = generateAccessToken({ _id: user._id, role: user.role });

    res.json({ token: accessToken });
  } catch (err) {
    console.log("Refresh error:", err); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏, –º–æ–∂–Ω–æ –ø–æ—Ç–æ–º —É–¥–∞–ª–∏—Ç—å
    return res.status(403).json({ msg: "Refresh token yaroqsiz" });
  }
});


module.exports = router;



